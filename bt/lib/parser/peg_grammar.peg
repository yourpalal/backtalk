grammar BackTalk
    line        <-          lead:SPACE? ex:expression? SPACE? comment? %makeLine
    expression  <-          func_call / sum / product / bool_exp / number / string / paren_expr
    sum         <-          ls:prod_quo parts:(SPACE? op:("+" / "-") SPACE? rs:prod_quo)+   %makeBinOpNode

    prod_quo    <-          product / arith_value
    product     <-          ls:arith_value parts:(SPACE? op:("*" / "/") SPACE? rs:arith_value)+ %makeBinOpNode

    bool_exp    <-          initial_not:("!" SPACE)? ls:bool_val parts:(SPACE? op:("&" / "|") not:(SPACE? "!")? SPACE rs:bool_val)* %makeBoolNode
    bool_val    <-          bool / ref / paren_expr

    arith_value <-          number / ref / paren_expr
    paren_expr  <-          "(" SPACE? ex:expression SPACE? ")" %makeParenNode


    comment     <-          "--" [^\n]*

    func_call   <-          ((ref SPACE bare) / bare) func_arg* colon:(SPACE? ":" SPACE?)? %makeCommandCall
    func_arg    <-          SPACE (ref / bool / bare / sum / product / number / string / paren_expr) %makeCommandArg
    ref         <-          "$" id:[a-zA-z_]+ %makeRef
    bare        <-          !"true" !"false" [a-zA-z]+ %makeBare

    SPACE       <-          [ ]+
    string      <-          "\"" [^"]* "\"" %makeString
    number      <-          [0-9]+ ("." [0-9]+)? %makeNumber
    bool        <-          "true" %makeBool / "false"  %makeBool
