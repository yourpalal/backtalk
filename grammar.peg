grammar BackTalk
    expression  <-          assignment / sum / prod_quo / literal / ref / func_call
    sum         <-          ls:prod_quo (op:("+" / "-") SPACE rs:prod_quo)+ <SumNode>

    prod_quo    <-          product / value
    product     <-          ls:value (op:("*" / "/") SPACE rs:value)+ <ProductNode>

    value       <-          number / ref / paren_expr
    paren_expr  <-          "(" SPACE ex:expression ")" SPACE <ParenNode>


    literal     <-          number / string
    string      <-          "\"" [^"]* "\"" <StringLiteral>
    number      <-          [0-9]+ ("." [0-9]+)? SPACE <NumberLiteral>

    comment     <-          "--" [^\n]* "\n"
    SPACE       <-          [^\S\n]*

    assignment  <-          "with" SPACE ref "as" SPACE expression <RefSetNode>
    ref         <-          "$" id:[a-zA-z_]+ SPACE <RefNode>

    func_call   <-          bare (bare / expression)*  <FuncCallNode>
    bare        <-          id:[a-zA-z]+ SPACE <BareNode>
