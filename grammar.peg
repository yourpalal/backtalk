grammar BackTalk
    compound    <-          ls:line rs:(BLANK+ line)*  <CompoundNode>
    line        <-          SPACE? ex:expression SPACE? comment? <LineNode>
    expression  <-          sum / product / number / string / assignment / func_call / paren_expr / ref

    sum         <-          ls:prod_quo parts:(SPACE? op:("+" / "-") SPACE? rs:prod_quo)+   <SumNode>

    prod_quo    <-          product / arith_value <ProdQuoNode>
    product     <-          ls:arith_value parts:(SPACE? op:("*" / "/") SPACE? rs:arith_value)+ <ProductNode>

    arith_value <-          number / ref / paren_expr <ArithValueNode>
    paren_expr  <-          "(" SPACE? ex:expression SPACE? ")" <ParenNode>


    comment     <-          "--" [^\n]* <Comment>

    assignment  <-          "with" SPACE ref SPACE "as" SPACE expression <RefSetNode>


    func_call   <-          bare (bare / expression)*  <FuncCallNode>
    ref         <-          "$" id:[a-zA-z_]+ <RefNode>
    bare        <-          [a-zA-z]+ <BareNode>

    BLANK       <-          "\n"+ SPACE?
    SPACE       <-          [ ]+ <SPACE>
    string      <-          "\"" [^"]* "\"" <StringLiteral>
    number      <-          [0-9]+ ("." [0-9]+)? <NumberLiteral>
